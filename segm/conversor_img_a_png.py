# -*- coding: utf-8 -*-
"""conversor_IMG_a_PNG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17IUekvIOYnWwKVCK39qK3717xU4Yre8F

## Descarga de datos e importación de librerías
"""

#Instalar e importar librerías
import numpy as np
import matplotlib.pyplot as plt

from PIL import Image
from scipy import signal
from skimage import exposure
#!pip install opencv-python
import SimpleITK as sitk
import cv2
import warnings
import SimpleITK as sitk
from skimage.restoration import denoise_tv_chambolle
from skimage.transform import resize
from skimage.filters import threshold_otsu
from skimage.morphology import binary_erosion, disk
from skimage.segmentation import clear_border
from skimage.measure import label, regionprops
from skimage.measure import find_contours
from skimage.draw import polygon
import cv2
import os
warnings.filterwarnings("ignore")

#from google.colab import drive
#drive.mount('/content/drive')

# Definir la ruta del las imágenes
path='C:\\Users\\Beatriz\\Desktop\\UPIBI\\ITBA IMAGENEOLOGÍA\\interfaz\\proyecto_PIB\\xrays sin segmentar IMG'

path_final='C:\\Users\\Beatriz\\Desktop\\UPIBI\\ITBA IMAGENEOLOGÍA\\interfaz\\proyecto_PIB\\xrays sin segmentar PNG'

path_final_segmentado='C:\\Users\\Beatriz\\Desktop\\UPIBI\\ITBA IMAGENEOLOGÍA\\interfaz\\proyecto_PIB\\xrays segmentados\\todo'

"""##Funciones"""

def reconstruir_nombre_archivo(numero, path):
    """
    Reconstruye el nombre del archivo de imagen a partir del número proporcionado.

    Args:
        numero (str): El número de la imagen, desde 1 hasta 154.
        path (str): La ruta base donde se encuentran los archivos .IMG.

    Returns:
        str: El nombre del archivo de imagen reconstruido.
    """
    # Construir el nombre del archivo .IMG
    numero=int(numero)
    nombre_archivo = f"{path}/JPCLN{numero:03d}.IMG"
    nombre_auxiliar = f"{path}/imagen_{numero:03d}.png"

    return nombre_archivo, nombre_auxiliar

#Parámetros de las imágenes 12 bits
shape = (2048, 2048)  # Tamaño de la matriz
dtype = np.dtype('>u2')  # Entero sin signo (big-endian de 16 bits)
output_filename = "imagen.PNG"

def ajustar_rango_dinamico(ruta_imagen_12bits, shape, dtype):
    """
    Ajusta el rango dinámico de una imagen de 12 bits a 8 bits y muestra la imagen.

    Args:
        ruta_imagen_12bits (str): La ruta del archivo de imagen de 12 bits.
        shape (tuple): El tamaño de la matriz de la imagen.
        dtype (numpy.dtype): El tipo de datos de la imagen.

    Returns:
        numpy.ndarray: La imagen ajustada de 8 bits.
    """
    # Lectura del archivo .IMG
    with open(ruta_imagen_12bits, 'rb') as fid:
        data = np.fromfile(fid, dtype)

    # Redimensionar la matriz de datos a la forma de la imagen
    imagen_12bits = data.reshape(shape)

    # Escalar los valores de la imagen de 12 bits al rango de 0 a 255
    imagen_8bits = (imagen_12bits / 4096 * 255).astype(np.uint8)

    # Mostrar la imagen
    plt.imshow(imagen_8bits, cmap='gray')
    plt.axis('off')
    plt.show()

    return imagen_8bits

def guardar_imagen_en_drive(imagen, nombre_archivo, ruta_destino):
    """
    Guarda una imagen en una ruta específica en Google Drive.

    Args:
        imagen (numpy.ndarray): La imagen a guardar.
        nombre_archivo (str): El nombre del archivo de la imagen.
        ruta_destino (str): La ruta donde se guardará la imagen en Google Drive.
    """
    # Comprobar si la ruta de destino existe, si no, crearla
    if not os.path.exists(ruta_destino):
        os.makedirs(ruta_destino)

    # Generar la ruta completa del archivo de destino
    ruta_completa = os.path.join(ruta_destino, nombre_archivo)

    # Guardar la imagen
    plt.imshow(imagen, cmap='gray')  # Mostrar la imagen antes de guardar (opcional)
    plt.axis('off')
    plt.savefig(ruta_completa, format='png', bbox_inches='tight', pad_inches=0)  # Guardar la imagen sin bordes

    # Imprimir un mensaje de confirmación
    print(f"Imagen guardada en: {ruta_completa}")

def redimensionar_arreglo(imagen, nueva_shape=(2048, 2048)):
    """
    Redimensiona un arreglo NumPy a una nueva forma y muestra la imagen resultante.

    Args:
        imagen (numpy.ndarray): La imagen como un arreglo NumPy.
        nueva_shape (tuple): La nueva forma deseada para la imagen.

    Returns:
        numpy.ndarray: La imagen redimensionada.
    """
    # Redimensionar el arreglo manteniendo los valores de píxel originales
    imagen_redimensionada = resize(imagen, nueva_shape, mode='reflect', anti_aliasing=True, preserve_range=True)

    # Mostrar la imagen redimensionada
    plt.imshow(imagen_redimensionada)
    plt.axis('off')
    plt.show()

    return imagen_redimensionada

def procesar_imagen(numero, path):
    # Imagen a tratar
    imagen = reconstruir_nombre_archivo(numero, path)[0]

    # Convierto a 8 bits
    imagen_8bits = ajustar_rango_dinamico(imagen, shape, dtype)
    imagen_redimensionada=redimensionar_arreglo(imagen_8bits)

    # Guardar en Drive
    nombre_archivo = f'imagen_{numero}.png'  # Nombre del archivo de la imagen
    guardar_imagen_en_drive(imagen_redimensionada, nombre_archivo, path_final)

"""## Conversor"""

for i in range(1, 155):
    numero = f"{i:03d}"  # Formatear el número con tres dígitos, por ejemplo, "001", "002", ..., "010"
    procesar_imagen(numero, path)